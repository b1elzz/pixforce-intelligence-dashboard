package com.pixforce.insights_search.entity;

/**
 * ===========================================
 * STATUS DE PROCESSAMENTO - ENUM
 * ===========================================
 * 
 * Define os poss√≠veis status de uma not√≠cia durante o pipeline de processamento.
 * Utilizado para rastrear o progresso da an√°lise e identificar poss√≠veis problemas.
 * 
 * FLUXO DE STATUS:
 * PENDING ‚Üí PROCESSING ‚Üí COMPLETED
 *    ‚Üì           ‚Üì
 * FAILED ‚Üê RETRYING
 * 
 * @author Equipe PixForce
 * @version 1.0.0
 * @since 2025-01-27
 */
public enum ProcessingStatus {
    
    /**
     * ‚è≥ PENDING
     * 
     * Not√≠cia coletada mas ainda n√£o processada pela IA.
     * Estado inicial ap√≥s coleta da API NewsData.io.
     */
    PENDING("‚è≥ Pendente", "Aguardando processamento pela IA"),
    
    /**
     * üîÑ PROCESSING
     * 
     * Not√≠cia sendo analisada pelo Gemini Pro.
     * Estado tempor√°rio durante a an√°lise de relev√¢ncia.
     */
    PROCESSING("üîÑ Processando", "Sendo analisada pela IA"),
    
    /**
     * ‚úÖ COMPLETED
     * 
     * Not√≠cia processada com sucesso.
     * An√°lise de relev√¢ncia conclu√≠da e categoria definida.
     */
    COMPLETED("‚úÖ Conclu√≠da", "Processamento finalizado com sucesso"),
    
    /**
     * ‚ùå FAILED
     * 
     * Falha no processamento da not√≠cia.
     * Pode ser devido a erro na API do Gemini ou timeout.
     */
    FAILED("‚ùå Falhou", "Erro durante o processamento"),
    
    /**
     * üîÑ RETRYING
     * 
     * Tentativa de reprocessamento ap√≥s falha.
     * Estado tempor√°rio para not√≠cias que falharam anteriormente.
     */
    RETRYING("üîÑ Tentando novamente", "Reprocessando ap√≥s falha");
    
    private final String displayName;
    private final String description;
    
    /**
     * Construtor do enum ProcessingStatus.
     * 
     * @param displayName Nome amig√°vel para exibi√ß√£o
     * @param description Descri√ß√£o do status
     */
    ProcessingStatus(String displayName, String description) {
        this.displayName = displayName;
        this.description = description;
    }
    
    /**
     * Retorna o nome amig√°vel do status para exibi√ß√£o.
     * 
     * @return Nome formatado com emoji
     */
    public String getDisplayName() {
        return displayName;
    }
    
    /**
     * Retorna a descri√ß√£o do status.
     * 
     * @return Descri√ß√£o explicativa
     */
    public String getDescription() {
        return description;
    }
    
    /**
     * Verifica se o status indica que o processamento foi conclu√≠do.
     * 
     * @return true se COMPLETED, false caso contr√°rio
     */
    public boolean isCompleted() {
        return this == COMPLETED;
    }
    
    /**
     * Verifica se o status indica que houve falha.
     * 
     * @return true se FAILED, false caso contr√°rio
     */
    public boolean isFailed() {
        return this == FAILED;
    }
    
    /**
     * Verifica se o status indica processamento em andamento.
     * 
     * @return true se PROCESSING ou RETRYING, false caso contr√°rio
     */
    public boolean isProcessing() {
        return this == PROCESSING || this == RETRYING;
    }
}
